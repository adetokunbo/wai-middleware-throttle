#+TITLE: WAI Request Rate Limiting Middleware
#+AUTHOR: Christopher Reichert
#+EMAIL: creichert07@gmail.com
#+LINK: badge-hackage https://img.shields.io/hackage/v/wai-middleware-throttle.svg?dummy
#+LINK: hackage       https://hackage.haskell.org/package/wai-middleware-throttle
#+LINK: issues        https://github.com/creichert/wai-middleware-throttle/issues

[[https://travis-ci.org/creichert/wai-middleware-throttle][https://travis-ci.org/creichert/wai-middleware-throttle.svg?branch=master]]
[[https://github.com/creichert/wai-middleware-throttle/blob/master/LICENSE][https://img.shields.io/badge/license-BSD3-green.svg?dummy]]


Rate Limit and Throttle WAI Requests

** Examples
**** Default (IP address throttler)
     #+BEGIN_SRC haskell
     main = do
       st <- initThrottler
       let payload  = "{ \"api\", \"return data\" }"
           app = throttle defaultThrottleSettings st
                   $ \_ f -> f (responseLBS status200 [] payload)
       Warp.run 3000 app
     #+END_SRC
**** Custom throttler (like an Authorization header)
     #+BEGIN_SRC haskell
     newtype MyData = MyData { unData :: Text } deriving (Eq, Ord, Show, Hashable)
     instance RequestHashable MyData where
       requestToKey = maybe (throwError "No authorization header") (pure . decodeUtf8 . snd) $
         find ((== hAuthorization) . fst) . requestHeaders
     main = do
       st <- initCustomThrottler :: IO (CustomWaiThrottle MyData)
       let payload = "{ \"api\", \"return data\" }"
           app = throttle defaultThrottleSettings st
                   $ \_ f -> f (responseLBS status200 [] payload)
       Warp.run 3000 app
     #+END_SRC
